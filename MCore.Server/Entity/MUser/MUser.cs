using CitizenFX.Core;
using CitizenFX.Core.Native;
using System;
using System.Collections.Generic;
using MCore.Server.Command;
using MCore.Server.Chat;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;

namespace MCore.Server.Entity
{
    public class MUser
    {
        /// <summary>
        /// A very unique id generated by MCore
        /// </summary>
        [Key]
        public string Id { get; set; }

        /// <summary>
        /// Player's unique Steam id
        /// </summary>
        [MaxLength(32)]
        public string SteamId { get; set; }

        /// <summary>
        /// Player's unique License id
        /// </summary>
        [MaxLength(64)]
        public string LicenseId { get; set; }

        /// <summary>
        /// Player's unique Discord id
        /// </summary>
        [MaxLength(64)]
        public string DiscordId { get; set; }

        /// <summary>
        /// Player's IP
        /// </summary>
        [MaxLength(32)]
        public string IP { get; set; }

        /// <summary>
        /// Player's MPlayer Accounts
        /// </summary>
        [NotMapped]
        public ICollection<MPlayer> MPlayerAccounts { get; private set; }

        /// <summary>
        /// Time player was created
        /// </summary>
        [NotMapped]
        public DateTime Created { get; set; }

        /// <summary>
        /// Player's current network id. Do not map/save
        /// </summary>
        [NotMapped]
        public int netId { get; set; }

        public MUser(string Id)
        {
            this.Id = Id;
            this.Created = DateTime.UtcNow;
            LoadMPlayers();
        }

        public MUser(Player player)
        {
            this.Id = (MUsers.Instance.MUserCount() + 1).ToString();

            var steamId = player.Identifiers[IdentifierType.STEAM];
            if (steamId != null)
            {
                this.SteamId = steamId;
            }

            var licenseId = player.Identifiers[IdentifierType.LICENSE];
            if (licenseId != null)
            {
                this.LicenseId = licenseId;
            }

            var discordId = player.Identifiers[IdentifierType.DISCORD];
            if (discordId != null)
            {
                this.DiscordId = discordId;
            }

            var ip = player.Identifiers[IdentifierType.IP];
            if (ip != null)
            {
                this.IP = ip;
            }

            this.Created = DateTime.UtcNow;
        }

        /// <summary>
        /// A parameter-less constructor used by MySQL
        /// </summary>
        public MUser() { }

        public void CreateMPlayer()
        {
            MPlayer mPlayer = new MPlayer(this);
            MPlayerAccounts.Add(mPlayer);
        }

        public void LoadMPlayers()
        {
            MPlayerAccounts.Clear();
            ICollection<MPlayer> mPlayers = MPlayers.Instance.GetAllMPlayers();
            foreach (MPlayer mPlayer in mPlayers)
            {
                if (mPlayer.MUser.Id == Id)
                {
                    MPlayerAccounts.Add(mPlayer);
                }
            }
        }

        public override string ToString()
        {
            return $"{Id} | {SteamId} | {LicenseId} | {IP} | {DiscordId}";
        }
    }
}
